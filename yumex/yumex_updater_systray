#!/usr/bin/python3
import gi

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
gi.require_version("GLib", "2.0")
gi.require_version("Flatpak", "1.0")

import configparser
import logging
import shutil
import subprocess
import threading
import time
from pathlib import Path
from dataclasses import dataclass

from gi.repository import AppIndicator3, Flatpak, GLib, Gtk  # type: ignore

from dasbus.server.interface import dbus_interface
from dasbus.connection import SessionMessageBus
from dasbus.loop import EventLoop

from yumex.constants import BACKEND

if BACKEND == "DNF5":
    from yumex.service.dnf5 import check_dnf_updates
else:
    from yumex.service.dnf4 import check_dnf_updates


logger = logging.getLogger("yumex_updater")
logging.basicConfig(
    level=logging.DEBUG,
    format="(%(name)-5s) -  %(message)s",
    datefmt="%H:%M:%S",
)


@dataclass
class Config:
    custom_updater: str
    always_hide: bool
    update_sync_interval: int

    @classmethod
    def from_file(cls):
        # Define paths
        config_dir = Path.home() / ".config" / "yumex"
        default_config_path = "/usr/share/yumex/yumex-service.conf"
        user_config_path = config_dir / "yumex-service.conf"
        # Create the config directory if it doesn't exist
        config_dir.mkdir(parents=True, exist_ok=True)
        # Copy the default config file if the user config file doesn't exist
        if not user_config_path.exists():
            shutil.copy(default_config_path, user_config_path)

        # Read configuration file
        logger.debug(f"CONFIG: Loading config from {user_config_path}")
        config = configparser.ConfigParser()
        config.read(user_config_path)
        custom_updater = config.get("DEFAULT", "custom_updater", fallback=None)
        always_hide = config.getboolean("DEFAULT", "always_hide", fallback=False)
        update_sync_interval = config.getint("DEFAULT", "update_sync_interval", fallback=3600)
        logger.debug(f"CONFIG: custom_updater        = {custom_updater}")
        logger.debug(f"CONFIG: always_hide           = {always_hide}")
        logger.debug(f"CONFIG: update_sync_interval  = {update_sync_interval}")
        return cls(custom_updater, always_hide, update_sync_interval)


@dataclass
class Updates:
    sys_update_count: int
    flatpak_user_count: int
    flatpak_sys_count: int

    @classmethod
    def get_updates(cls, refresh):
        sys_update_count = len(check_dnf_updates(refresh))
        user_installation = Flatpak.Installation.new_user()
        flatpak_user_count = len(user_installation.list_installed_refs_for_update())
        del user_installation

        system_installation = Flatpak.Installation.new_system()
        flatpak_sys_count = len(system_installation.list_installed_refs_for_update())
        del system_installation
        return cls(sys_update_count, flatpak_user_count, flatpak_sys_count)


# Setup the DBus service
@dbus_interface("dk.yumex.UpdateService")
class UpdateService(object):
    def RefreshUpdates(self, refresh: bool) -> None:
        logger.debug(f"DBUS: RefreshUpdates {refresh}")
        GLib.idle_add(refresh_updates, refresh)


class Indicator:
    def __init__(self):
        self._indicator = None

    @property
    def indicator(self):
        if not self._indicator:
            self._indicator = self._factory()
        return self._indicator

    def clear(self):
        del self._indicator
        self._indicator = None

    def _factory(self):
        indicator = AppIndicator3.Indicator.new(
            "System Update Monitor",
            "/usr/share/icons/hicolor/scalable/apps/yumex-system-software-update.svg",
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS,
        )
        indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        indicator.set_title("Checking for updates...")
        indicator.set_menu(self.get_menu())
        return indicator

    def on_clicked_custom(self, *args) -> None:
        """start custom updater"""
        subprocess.Popen([CONFIG.custom_updater], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def on_clicked_pm(self, *args) -> None:
        """start yumex"""
        subprocess.Popen(["/usr/bin/yumex", "--update"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def on_check_updates(self, *args) -> None:
        refresh_updates(True)

    def get_menu(self) -> Gtk.Menu:
        """build menu for sys tray indicator"""
        menu = Gtk.Menu()
        refresh_item = Gtk.MenuItem(label="Check for Updates")
        refresh_item.connect("activate", self.on_check_updates)
        menu.append(refresh_item)
        if CONFIG.custom_updater:
            update_item = Gtk.MenuItem(label="Update System")
            update_item.connect("activate", self.on_clicked_custom)
            menu.append(update_item)
        pm_item = Gtk.MenuItem(label="Open Package Manager")
        pm_item.connect("activate", self.on_clicked_pm)
        menu.append(pm_item)
        menu.show_all()
        return menu


def refresh_updates(refresh: bool) -> None:
    logger.debug(f"Refreshing updates ({refresh})")
    updates: Updates = Updates.get_updates(refresh)

    update_count = updates.sys_update_count + updates.flatpak_user_count + updates.flatpak_sys_count

    logger.debug(f" --> flatpak system : {updates.flatpak_sys_count}")
    logger.debug(f" --> flatpak user   : {updates.flatpak_user_count}")
    logger.debug(f" --> {BACKEND}   : {updates.sys_update_count}")

    hover_text_lines = ["There are updates available:"]
    if updates.sys_update_count > 0:
        hover_text_lines.append(f"  System: {updates.sys_update_count}")
    if updates.flatpak_user_count > 0:
        hover_text_lines.append(f"  Flatpak (user): {updates.flatpak_user_count}")
    if updates.flatpak_sys_count > 0:
        hover_text_lines.append(f"  Flatpak (system): {updates.flatpak_sys_count}")
    hover_text = "\n".join(hover_text_lines)
    if not CONFIG.always_hide:
        if update_count > 0:
            GLib.idle_add(INDICATOR.indicator.set_title, hover_text)
        else:
            INDICATOR.clear()


# Setup Constants
CONFIG = Config.from_file()
INDICATOR = Indicator()


def check_updates() -> None:
    while True:
        refresh_updates(True)
        time.sleep(CONFIG.update_sync_interval)


def main():
    # Setup DBus Service
    bus = SessionMessageBus()
    bus.publish_object("/dk/yumex/UpdateService", UpdateService())
    bus.register_service("dk.yumex.UpdateService")

    # Setup scheduled update check
    update_thread = threading.Thread(target=check_updates, daemon=True)
    update_thread.start()

    loop = EventLoop()
    loop.run()


if __name__ == "__main__":
    main()
