#!/usr/bin/python3
import gi


gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
gi.require_version("GLib", "2.0")
gi.require_version("Flatpak", "1.0")

import logging
import subprocess
import threading
import time
from dataclasses import dataclass

from gi.repository import Flatpak, GLib  # type: ignore

from dasbus.server.interface import dbus_interface
from dasbus.connection import SessionMessageBus
from dasbus.loop import EventLoop

from yumex.constants import BACKEND
from yumex.service.notification import Notification, Action
from yumex.service import Config, Indicator

if BACKEND == "DNF5":
    from yumex.service.dnf5 import check_dnf_updates
else:
    from yumex.service.dnf4 import check_dnf_updates


logger = logging.getLogger("yumex_updater")
logging.basicConfig(
    level=logging.DEBUG,
    format="(%(name)-5s) -  %(message)s",
    datefmt="%H:%M:%S",
)

# Setup Global Constants
CONFIG = Config.from_file()
INDICATOR = Indicator()


@dataclass
class Updates:
    sys_update_count: int
    flatpak_user_count: int
    flatpak_sys_count: int

    @classmethod
    def get_updates(cls, refresh):
        sys_update_count = len(check_dnf_updates(refresh))
        user_installation = Flatpak.Installation.new_user()
        flatpak_user_count = len(user_installation.list_installed_refs_for_update())
        del user_installation

        system_installation = Flatpak.Installation.new_system()
        flatpak_sys_count = len(system_installation.list_installed_refs_for_update())
        del system_installation
        return cls(sys_update_count, flatpak_user_count, flatpak_sys_count)


# Setup the DBus service
@dbus_interface("dk.yumex.UpdateService")
class UpdateService(object):
    def RefreshUpdates(self, refresh: bool) -> None:
        logger.debug(f"DBUS: RefreshUpdates {refresh}")
        GLib.idle_add(refresh_updates, refresh)


def refresh_updates(refresh: bool) -> None:
    logger.debug(f"Refreshing updates ({refresh})")
    updates: Updates = Updates.get_updates(refresh)

    update_count = updates.sys_update_count + updates.flatpak_user_count + updates.flatpak_sys_count

    logger.debug(f" --> flatpak system : {updates.flatpak_sys_count}")
    logger.debug(f" --> flatpak user   : {updates.flatpak_user_count}")
    logger.debug(f" --> {BACKEND}   : {updates.sys_update_count}")

    hover_text_lines = ["There are updates available:"]
    noti_body = ""
    if updates.sys_update_count > 0:
        hover_text_lines.append(f"  System: {updates.sys_update_count}")
        noti_body += f" {updates.sys_update_count} packages"
    if updates.flatpak_user_count > 0:
        hover_text_lines.append(f"  Flatpak (user): {updates.flatpak_user_count}")
        noti_body += f" {updates.flatpak_user_count} flatpaks (user)"
    if updates.flatpak_sys_count > 0:
        hover_text_lines.append(f"  Flatpak (system): {updates.flatpak_sys_count}")
        noti_body += f" {updates.flatpak_sys_count} flatpaks (system)"
    hover_text = "\n".join(hover_text_lines)
    if not CONFIG.always_hide:
        if update_count > 0:
            GLib.idle_add(INDICATOR.set_title, hover_text)
        else:
            INDICATOR.clear()

    if CONFIG.send_notification:
        if update_count > 0:
            summary = _("Updates is available")
            body = noti_body
            NOTIFICATION.send(summary, body)


def check_updates() -> None:
    while True:
        refresh_updates(False)
        time.sleep(CONFIG.update_sync_interval)


def setup_notification():
    app_name = "Yum Extender"
    icon_name = "software-update-available-symbolic"
    actions = [Action("open", "Open Yum Extender", open_yumex)]
    notification = Notification(app_name, icon_name, actions=actions)
    return notification


def open_yumex(*args):
    logger.info(f"open_yumex {args}")
    subprocess.Popen(["/usr/bin/yumex", "--update"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


if CONFIG.send_notification:
    NOTIFICATION: Notification = setup_notification()
else:
    NOTIFICATION = None


def main():
    # Setup DBus Service
    bus = SessionMessageBus()
    bus.publish_object("/dk/yumex/UpdateService", UpdateService())
    bus.register_service("dk.yumex.UpdateService")

    # Setup scheduled update check
    update_thread = threading.Thread(target=check_updates, daemon=True)
    update_thread.start()
    loop = EventLoop()
    loop.run()


if __name__ == "__main__":
    main()
